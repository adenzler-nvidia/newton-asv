{"project": "newton", "project_url": "https://github.com/newton-physics/newton", "show_commit_url": "https://github.com/newton-physics/newton/commit/", "hash_length": 8, "revision_to_hash": {"768": "9d1b1d1d551c9ade7a019b74c849b60e866f8785", "769": "f671607e78dd13e8efb80ba19a759f00fb2f221a", "819": "c341e330d7ed277750892bdb1941ea1ceca1a62a", "820": "e9b094a28febff9489f49ef4f59cd4632235c2a6"}, "revision_to_date": {"768": 1755865657000, "769": 1755878427000, "819": 1757079283000, "820": 1757093936000}, "params": {"arch": ["x86_64"], "cpu": ["AMD EPYC-Milan Processor"], "machine": ["adenzler-asv-runner"], "num_cpu": ["32"], "os": ["Linux 5.15.0-131-generic"], "ram": ["65836440"], "python": ["3.13"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC-Milan Processor", "machine": "adenzler-asv-runner", "num_cpu": "32", "os": "Linux 5.15.0-131-generic", "ram": "65836440", "python": "3.13", "branch": "main"}], "benchmarks": {"compilation.bench_example_load.SlowExampleBasicUrdf.time_load": {"code": "class SlowExampleBasicUrdf:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.basic.example_basic_urdf\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleBasicUrdf.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "5212ba785a2d013b8fc4b4fd1f0281ba23f65a10036f337e6abebdcd1784a35a", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleClothFranka.time_load": {"code": "class SlowExampleClothFranka:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.cloth.example_cloth_franka\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleClothFranka.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9a1d510bf84d0d2d4d3c68dc0b43f672866854e51df5b70071be0cc9a9aa37ee", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleClothTwist.time_load": {"code": "class SlowExampleClothTwist:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.cloth.example_cloth_twist\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleClothTwist.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2944bcd1d41a1d0755a46fab1ccbb2b38418c589a0ebb982702ba9be5bd32471", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleRobotAnymal.time_load": {"code": "class SlowExampleRobotAnymal:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_anymal_c_walk\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleRobotAnymal.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "30b4e830fd859608ff412e9052e49492eb804327e44f3cbedf4183876c171021", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleRobotCartpole.time_load": {"code": "class SlowExampleRobotCartpole:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_cartpole\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleRobotCartpole.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "71e2c9a9b0957497094f25a0b4dff3546059e17c249880ccff2c5a3dc09debf7", "warmup_time": 0}, "compilation.bench_example_load.SlowExampleRobotHumanoid.time_load": {"code": "class SlowExampleRobotHumanoid:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_humanoid\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()", "min_run_count": 2, "name": "compilation.bench_example_load.SlowExampleRobotHumanoid.time_load", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "3d838883c58af639755f7dcfa6d7b6f603f4faefa35577421e70a41be5877518", "warmup_time": 0}, "setup.bench_model.FastInitializeModel.peakmem_initialize_model_cpu": {"code": "class FastInitializeModel:\n    def peakmem_initialize_model_cpu(self, robot, num_envs):\n        gc.collect()\n    \n        with wp.ScopedDevice(\"cpu\"):\n            builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n            # finalize model\n            model = builder.finalize()\n    \n        del model\n\n    def setup_cache(self):\n        # Load a small model to cache the kernels\n        builder = Example.create_model_builder(\"cartpole\", 1, randomize=False, seed=123)\n        model = builder.finalize(device=\"cpu\")\n        del model", "name": "setup.bench_model.FastInitializeModel.peakmem_initialize_model_cpu", "param_names": ["robot", "num_envs"], "params": [["'humanoid'", "'g1'", "'h1'", "'cartpole'", "'ant'", "'quadruped'"], ["128", "256"]], "setup_cache_key": "setup.bench_model:59", "type": "peakmemory", "unit": "bytes", "version": "00b15a26b4c43ef2248ee8fe62d371f732257fb3137f06c9097d9acea132204d"}, "setup.bench_model.FastInitializeModel.time_initialize_model": {"code": "class FastInitializeModel:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_model(self, robot, num_envs):\n        builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n        # finalize model\n        _model = builder.finalize()\n        wp.synchronize_device()\n\n    def setup_cache(self):\n        # Load a small model to cache the kernels\n        builder = Example.create_model_builder(\"cartpole\", 1, randomize=False, seed=123)\n        model = builder.finalize(device=\"cpu\")\n        del model", "min_run_count": 1, "name": "setup.bench_model.FastInitializeModel.time_initialize_model", "number": 1, "param_names": ["robot", "num_envs"], "params": [["'humanoid'", "'g1'", "'h1'", "'cartpole'", "'ant'", "'quadruped'"], ["128", "256"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "setup.bench_model:59", "type": "time", "unit": "seconds", "version": "ffaa21a0ae50932fc9968e894d23821a76d4f8f21762bf4f09488a61cd95c4d4", "warmup_time": -1}, "setup.bench_model.KpiInitializeModel.time_initialize_model": {"code": "class KpiInitializeModel:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_model(self, robot, num_envs):\n        builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n        # finalize model\n        _model = builder.finalize()\n        wp.synchronize_device()\n\n    def setup(self, robot, num_envs):\n        wp.init()", "min_run_count": 1, "name": "setup.bench_model.KpiInitializeModel.time_initialize_model", "number": 1, "param_names": ["robot", "num_envs"], "params": [["'humanoid'", "'g1'", "'h1'", "'cartpole'", "'ant'", "'quadruped'"], ["4096", "8192"]], "repeat": 3, "rounds": 1, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "916798ac3c284de170329bf7c2922e5f147d35325fe54719dc7624847692f943", "warmup_time": -1}, "simulation.bench_anymal.FastExampleAnymalPretrained.time_simulate": {"code": "class FastExampleAnymalPretrained:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 50\n        self.example = Example(viewer=newton.viewer.ViewerNull(num_frames=self.num_frames))", "min_run_count": 2, "name": "simulation.bench_anymal.FastExampleAnymalPretrained.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 3, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "29d871d361f5e50619ca9ee4af8ee5f22def523c03a5aa19b0365c23ecb5dd28", "warmup_time": -1}, "simulation.bench_cloth.FastExampleClothManipulation.time_simulate": {"code": "class FastExampleClothManipulation:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        newton.examples.run(self.example)\n    \n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 30\n        self.example = ExampleClothManipulation(ViewerNull(num_frames=self.num_frames))", "min_run_count": 2, "name": "simulation.bench_cloth.FastExampleClothManipulation.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 3, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "e988df7362b547f3a7d63818479fde212e90c229bf7d08f76d8abf6f0695b906", "warmup_time": -1}, "simulation.bench_cloth.FastExampleClothTwist.time_simulate": {"code": "class FastExampleClothTwist:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        newton.examples.run(self.example)\n    \n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 100\n        self.example = ExampleClothTwist(ViewerNull(num_frames=self.num_frames))", "min_run_count": 2, "name": "simulation.bench_cloth.FastExampleClothTwist.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 5, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7955b0a25040d6171fd318837e6c8363dab71558c0c42e097538d8c12f0ae4f2", "warmup_time": -1}, "simulation.bench_mujoco.FastAnt.time_simulate": {"code": "class FastAnt:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"random\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastAnt.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 8, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4c34b8a9664bee472d4c4189ded9e159dfa749d1a3711d27c67e3cde6b047a9d", "warmup_time": -1}, "simulation.bench_mujoco.FastCartpole.time_simulate": {"code": "class FastCartpole:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"random\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastCartpole.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 8, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "fd39a3301fb0764cbe97bb8cecd47aca52f3dc2b84093658a4893183bf28b09b", "warmup_time": -1}, "simulation.bench_mujoco.FastG1.time_simulate": {"code": "class FastG1:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"random\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastG1.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3f90655636df5dea3120b818821f1d40cc29bf493cadcbb45fb6220bc8f42a0d", "warmup_time": -1}, "simulation.bench_mujoco.FastH1.time_simulate": {"code": "class FastH1:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"random\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastH1.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 2, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "8494a814d1442ef5ce03db2bdc83193cef90386962ad6ba91db9569580c07254", "warmup_time": -1}, "simulation.bench_mujoco.FastHumanoid.time_simulate": {"code": "class FastHumanoid:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"random\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()", "min_run_count": 2, "name": "simulation.bench_mujoco.FastHumanoid.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 8, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6d4f22a97d02d0202c17acf2fb398296380adde65ac0eb15a38a25445f1fd36f", "warmup_time": -1}, "simulation.bench_mujoco.KpiAnt.track_simulate": {"code": "class KpiAnt:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n            )\n    \n            wp.synchronize_device()\n            start_time = time.time()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += time.time() - start_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)", "name": "simulation.bench_mujoco.KpiAnt.track_simulate", "param_names": ["num_envs"], "params": [["4096", "8192", "16384"]], "type": "track", "unit": "ms/env-step", "version": "b005fa08d44e263fd2b07b832e268631aebb8b192bb1beb8699fc4eb8c32cebb"}, "simulation.bench_mujoco.KpiCartpole.track_simulate": {"code": "class KpiCartpole:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n            )\n    \n            wp.synchronize_device()\n            start_time = time.time()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += time.time() - start_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)", "name": "simulation.bench_mujoco.KpiCartpole.track_simulate", "param_names": ["num_envs"], "params": [["4096", "8192"]], "type": "track", "unit": "ms/env-step", "version": "63274508512b40cda3e7630650c8ae03a11d2a212470ec94aae1e52f6f103523"}, "simulation.bench_mujoco.KpiG1.track_simulate": {"code": "class KpiG1:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n            )\n    \n            wp.synchronize_device()\n            start_time = time.time()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += time.time() - start_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)", "name": "simulation.bench_mujoco.KpiG1.track_simulate", "param_names": ["num_envs"], "params": [["4096", "8192"]], "timeout": 900, "type": "track", "unit": "ms/env-step", "version": "de573199420bdf0ac2a2fba80c2c55155f9681efb334b7e7d1c08f9d9f18fa7b"}, "simulation.bench_mujoco.KpiH1.track_simulate": {"code": "class KpiH1:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n            )\n    \n            wp.synchronize_device()\n            start_time = time.time()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += time.time() - start_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)", "name": "simulation.bench_mujoco.KpiH1.track_simulate", "param_names": ["num_envs"], "params": [["4096", "8192"]], "timeout": 900, "type": "track", "unit": "ms/env-step", "version": "10531e36e539032d65657b866d836a7d6961927420aaf400c637dcf543c4ce39"}, "simulation.bench_mujoco.KpiHumanoid.track_simulate": {"code": "class KpiHumanoid:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n            )\n    \n            wp.synchronize_device()\n            start_time = time.time()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += time.time() - start_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)", "name": "simulation.bench_mujoco.KpiHumanoid.track_simulate", "param_names": ["num_envs"], "params": [["4096", "8192"]], "type": "track", "unit": "ms/env-step", "version": "8c1e58a66c1ac1baa09e381097304cb6bd99e3da12f50dca069650a30c82f87e"}, "simulation.bench_quadruped_xpbd.FastExampleQuadrupedXPBD.time_simulate": {"code": "class FastExampleQuadrupedXPBD:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 1000\n        self.example = Example(viewer=newton.viewer.ViewerNull(num_frames=self.num_frames), num_envs=200)", "min_run_count": 2, "name": "simulation.bench_quadruped_xpbd.FastExampleQuadrupedXPBD.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 10, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3ba5e67e6f32e36e4ffbdb35ec8f63b31e8c6be3845f7dfea1b5f689a5d17a9a", "warmup_time": -1}, "simulation.bench_selection.FastExampleSelectionCartpoleMuJoCo.time_simulate": {"code": "class FastExampleSelectionCartpoleMuJoCo:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 200\n        self.example = Example(viewer=newton.viewer.ViewerNull(num_frames=self.num_frames), num_envs=16, verbose=False)", "min_run_count": 2, "name": "simulation.bench_selection.FastExampleSelectionCartpoleMuJoCo.time_simulate", "number": 1, "param_names": [], "params": [], "repeat": 10, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "217a8c3af2d5684c13e158f125e31b36d1d2979162485f3aa55f1c331e55cb40", "warmup_time": -1}}, "machines": {"adenzler-asv-runner": {"arch": "x86_64", "cpu": "AMD EPYC-Milan Processor", "machine": "adenzler-asv-runner", "num_cpu": "32", "os": "Linux 5.15.0-131-generic", "ram": "65836440", "version": 1}}, "tags": {"alpha-0": 768, "alpha-1": 769}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}